#!/usr/bin/env python3

import unittest
import requests
import json
from urllib.parse import urlencode

class TestAPIEndpoints(unittest.TestCase):
    def setUp(self):
        """Настройка тестового окружения"""
        self.base_url = "http://localhost:8080"
        self.test_drone_id = "test_drone_001"
        self.test_mission = {
            "drone_id": self.test_drone_id,
            "waypoints": [
                {"lat": 55.7558, "lon": 37.6173, "alt": 50},
                {"lat": 55.7559, "lon": 37.6174, "alt": 50}
            ],
            "payload": "test_package"
        }

    def test_telemetry_endpoint(self):
        """Тест эндпоинта телеметрии"""
        try:
            # Формируем параметры телеметрии
            telemetry_params = {
                "drone_id": self.test_drone_id,
                "lat": 55.7558,
                "lon": 37.6173,
                "alt": 50,
                "speed": 10,
                "battery": 100,
                "status": "active"
            }
            
            # Проверяем, что эндпоинт существует
            response = requests.post(
                f"{self.base_url}/telemetry",
                data=urlencode(telemetry_params),
                headers={'Content-Type': 'application/x-www-form-urlencoded'},
                timeout=5
            )
            # Даже если сервер не запущен, мы проверяем, что эндпоинт существует
            self.assertIn(response.status_code, [200, 404, 500])
        except requests.exceptions.ConnectionError:
            # Если сервер не запущен, это нормально для теста
            pass
        except Exception as e:
            self.fail(f"Неожиданная ошибка при тестировании телеметрии: {str(e)}")

    def test_mission_endpoint(self):
        """Тест эндпоинта миссии"""
        try:
            # Проверяем, что эндпоинт существует
            response = requests.post(
                f"{self.base_url}/mission",
                json=self.test_mission,
                timeout=5
            )
            # Даже если сервер не запущен, мы проверяем, что эндпоинт существует
            self.assertIn(response.status_code, [200, 404, 500])
        except requests.exceptions.ConnectionError:
            # Если сервер не запущен, это нормально для теста
            pass
        except Exception as e:
            self.fail(f"Неожиданная ошибка при тестировании миссии: {str(e)}")

    def test_drone_registration_endpoint(self):
        """Тест эндпоинта регистрации дрона"""
        try:
            # Проверяем, что эндпоинт существует
            response = requests.post(
                f"{self.base_url}/drone/register",
                json={"drone_id": self.test_drone_id},
                timeout=5
            )
            # Даже если сервер не запущен, мы проверяем, что эндпоинт существует
            self.assertIn(response.status_code, [200, 404, 500])
        except requests.exceptions.ConnectionError:
            # Если сервер не запущен, это нормально для теста
            pass
        except Exception as e:
            self.fail(f"Неожиданная ошибка при тестировании регистрации дрона: {str(e)}")

if __name__ == '__main__':
    unittest.main() 
